@use "sass:math";
@use "sass:meta";
@use "sass:list";
@use "sass:map";
@use "variables";

// ===== 1. Миксин для центрирования (Flexbox) =====
@mixin flex-center($direction: row) {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: $direction;
}

// ===== 2. Миксин для адаптации =====
@mixin responsive($breakpoint) {
  @media (max-width: $breakpoint) {
    @content;
  }
}

// ===== 3. Миксин для стилей шрифта =====
@mixin apply-font($family, $weight, $size) {
  font-family: $family;
  font-weight: $weight;
  font-size: rem($size);
}

// ===== 4. Миксин для обрезки текста =====
@mixin truncate-text {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

// ===== 5. Функция для конвертации в REM (ИСПРАВЛЕНА) =====
@function rem($pixels...) {
  $base-font-size: variables.$font-size-base;
  // Получаем базовый размер шрифта как чистое число
  $base-unitless: math.div($base-font-size, 1px);
  $rem-values: ();

  @each $pixel-value in $pixels {
    // Проверяем, что это число, а не строка типа "auto"
    @if meta.type-of($pixel-value) == 'number' {
      $pixel-unitless: $pixel-value;

      // Если у числа есть единица измерения (например, 16px), убираем ее.
      // Используем современную функцию math.is-unitless().
      @if not math.is-unitless($pixel-unitless) {
        $pixel-unitless: math.div($pixel-value, 1px);
      }

      // Теперь, когда у нас гарантированно чистое число, выполняем расчет
      $rem-values: list.append($rem-values, math.div($pixel-unitless, $base-unitless) * 1rem, space);

    } @else {
      // Если это не число (например, 'auto'), оставляем как есть
      $rem-values: list.append($rem-values, $pixel-value, space);
    }
  }

  @return $rem-values;
}


// ===== 6. Функция для управления Z-индексами (исправлена) =====
@function z($layer) {
  // Используем современную функцию map.has-key()
  @if not map.has-key(variables.$z-layers, $layer) {
    @error "Слой '#{$layer}' не найден в карте $z-layers. Проверьте _variables.scss.";
  }
  // Используем современную функцию map.get()
  @return map.get(variables.$z-layers, $layer);
}

// ===== 7. Состояния (hover/focus) =====
@mixin on-event {
  &:hover, &:focus-visible {
    @content;
  }
}

// ===== 8.
@mixin modal-image {
  display: block;
  max-height: 90vh;
  max-width: 90vw;
  object-fit: contain;
  border-radius: rem(12px);
}